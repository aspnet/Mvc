// <auto-generated />
namespace Microsoft.AspNet.Mvc.Core
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNet.Mvc.Core.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The provided anti-forgery token failed a custom data check.
        /// </summary>
        internal static string AntiForgeryToken_AdditionalDataCheckFailed
        {
            get { return GetString("AntiForgeryToken_AdditionalDataCheckFailed"); }
        }

        /// <summary>
        /// The provided anti-forgery token failed a custom data check.
        /// </summary>
        internal static string FormatAntiForgeryToken_AdditionalDataCheckFailed()
        {
            return GetString("AntiForgeryToken_AdditionalDataCheckFailed");
        }

        /// <summary>
        /// The provided anti-forgery token was meant for a different claims-based user than the current user.
        /// </summary>
        internal static string AntiForgeryToken_ClaimUidMismatch
        {
            get { return GetString("AntiForgeryToken_ClaimUidMismatch"); }
        }

        /// <summary>
        /// The provided anti-forgery token was meant for a different claims-based user than the current user.
        /// </summary>
        internal static string FormatAntiForgeryToken_ClaimUidMismatch()
        {
            return GetString("AntiForgeryToken_ClaimUidMismatch");
        }

        /// <summary>
        /// The required anti-forgery cookie "{0}" is not present.
        /// </summary>
        internal static string AntiForgeryToken_CookieMissing
        {
            get { return GetString("AntiForgeryToken_CookieMissing"); }
        }

        /// <summary>
        /// The required anti-forgery cookie "{0}" is not present.
        /// </summary>
        internal static string FormatAntiForgeryToken_CookieMissing(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AntiForgeryToken_CookieMissing"), p0);
        }

        /// <summary>
        /// The anti-forgery token could not be decrypted.
        /// </summary>
        internal static string AntiForgeryToken_DeserializationFailed
        {
            get { return GetString("AntiForgeryToken_DeserializationFailed"); }
        }

        /// <summary>
        /// The anti-forgery token could not be decrypted.
        /// </summary>
        internal static string FormatAntiForgeryToken_DeserializationFailed()
        {
            return GetString("AntiForgeryToken_DeserializationFailed");
        }

        /// <summary>
        /// The required anti-forgery form field "{0}" is not present.
        /// </summary>
        internal static string AntiForgeryToken_FormFieldMissing
        {
            get { return GetString("AntiForgeryToken_FormFieldMissing"); }
        }

        /// <summary>
        /// The required anti-forgery form field "{0}" is not present.
        /// </summary>
        internal static string FormatAntiForgeryToken_FormFieldMissing(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AntiForgeryToken_FormFieldMissing"), p0);
        }

        /// <summary>
        /// The anti-forgery cookie token and form field token do not match.
        /// </summary>
        internal static string AntiForgeryToken_SecurityTokenMismatch
        {
            get { return GetString("AntiForgeryToken_SecurityTokenMismatch"); }
        }

        /// <summary>
        /// The anti-forgery cookie token and form field token do not match.
        /// </summary>
        internal static string FormatAntiForgeryToken_SecurityTokenMismatch()
        {
            return GetString("AntiForgeryToken_SecurityTokenMismatch");
        }

        /// <summary>
        /// Validation of the provided anti-forgery token failed. The cookie "{0}" and the form field "{1}" were swapped.
        /// </summary>
        internal static string AntiForgeryToken_TokensSwapped
        {
            get { return GetString("AntiForgeryToken_TokensSwapped"); }
        }

        /// <summary>
        /// Validation of the provided anti-forgery token failed. The cookie "{0}" and the form field "{1}" were swapped.
        /// </summary>
        internal static string FormatAntiForgeryToken_TokensSwapped(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AntiForgeryToken_TokensSwapped"), p0, p1);
        }

        /// <summary>
        /// The provided anti-forgery token was meant for user "{0}", but the current user is "{1}".
        /// </summary>
        internal static string AntiForgeryToken_UsernameMismatch
        {
            get { return GetString("AntiForgeryToken_UsernameMismatch"); }
        }

        /// <summary>
        /// The provided anti-forgery token was meant for user "{0}", but the current user is "{1}".
        /// </summary>
        internal static string FormatAntiForgeryToken_UsernameMismatch(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AntiForgeryToken_UsernameMismatch"), p0, p1);
        }

        /// <summary>
        /// The anti-forgery system has the configuration value AntiForgeryOptions.RequireSsl = true, but the current request is not an SSL request.
        /// </summary>
        internal static string AntiForgeryWorker_RequireSSL
        {
            get { return GetString("AntiForgeryWorker_RequireSSL"); }
        }

        /// <summary>
        /// The anti-forgery system has the configuration value AntiForgeryOptions.RequireSsl = true, but the current request is not an SSL request.
        /// </summary>
        internal static string FormatAntiForgeryWorker_RequireSSL()
        {
            return GetString("AntiForgeryWorker_RequireSSL");
        }

        /// <summary>
        /// The method '{0}' on type '{1}' returned an instance of '{2}'. Make sure to call Unwrap on the returned value to avoid unobserved faulted Task.
        /// </summary>
        internal static string ActionExecutor_WrappedTaskInstance
        {
            get { return GetString("ActionExecutor_WrappedTaskInstance"); }
        }

        /// <summary>
        /// The method '{0}' on type '{1}' returned an instance of '{2}'. Make sure to call Unwrap on the returned value to avoid unobserved faulted Task.
        /// </summary>
        internal static string FormatActionExecutor_WrappedTaskInstance(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ActionExecutor_WrappedTaskInstance"), p0, p1, p2);
        }

        /// <summary>
        /// The method '{0}' on type '{1}' returned a Task instance even though it is not an asynchronous method.
        /// </summary>
        internal static string ActionExecutor_UnexpectedTaskInstance
        {
            get { return GetString("ActionExecutor_UnexpectedTaskInstance"); }
        }

        /// <summary>
        /// The method '{0}' on type '{1}' returned a Task instance even though it is not an asynchronous method.
        /// </summary>
        internal static string FormatActionExecutor_UnexpectedTaskInstance(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ActionExecutor_UnexpectedTaskInstance"), p0, p1);
        }

        /// <summary>
        /// A claim of type '{0}' was not present on the provided ClaimsIdentity.
        /// </summary>
        internal static string ClaimUidExtractor_ClaimNotPresent
        {
            get { return GetString("ClaimUidExtractor_ClaimNotPresent"); }
        }

        /// <summary>
        /// A claim of type '{0}' was not present on the provided ClaimsIdentity.
        /// </summary>
        internal static string FormatClaimUidExtractor_ClaimNotPresent(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ClaimUidExtractor_ClaimNotPresent"), p0);
        }

        /// <summary>
        /// The provided identity of type '{0}' is marked IsAuthenticated = true but does not have a value for Name. By default, the anti-forgery system requires that all authenticated identities have a unique Name. If it is not possible to provide a unique Name for this identity, consider extending IAdditionalDataProvider by overriding the DefaultAdditionalDataProvider or a custom type that can provide some form of unique identifier for the current user.
        /// </summary>
        internal static string TokenValidator_AuthenticatedUserWithoutUsername
        {
            get { return GetString("TokenValidator_AuthenticatedUserWithoutUsername"); }
        }

        /// <summary>
        /// The provided identity of type '{0}' is marked IsAuthenticated = true but does not have a value for Name. By default, the anti-forgery system requires that all authenticated identities have a unique Name. If it is not possible to provide a unique Name for this identity, consider extending IAdditionalDataProvider by overriding the DefaultAdditionalDataProvider or a custom type that can provide some form of unique identifier for the current user.
        /// </summary>
        internal static string FormatTokenValidator_AuthenticatedUserWithoutUsername(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TokenValidator_AuthenticatedUserWithoutUsername"), p0);
        }

        /// <summary>
        /// The class ReflectedActionFilterEndPoint only supports ReflectedActionDescriptors.
        /// </summary>
        internal static string ReflectedActionFilterEndPoint_UnexpectedActionDescriptor
        {
            get { return GetString("ReflectedActionFilterEndPoint_UnexpectedActionDescriptor"); }
        }

        /// <summary>
        /// The class ReflectedActionFilterEndPoint only supports ReflectedActionDescriptors.
        /// </summary>
        internal static string FormatReflectedActionFilterEndPoint_UnexpectedActionDescriptor()
        {
            return GetString("ReflectedActionFilterEndPoint_UnexpectedActionDescriptor");
        }

        /// <summary>
        /// The view component name '{0}' matched multiple types: {1}
        /// </summary>
        internal static string ViewComponent_AmbiguousTypeMatch
        {
            get { return GetString("ViewComponent_AmbiguousTypeMatch"); }
        }

        /// <summary>
        /// The view component name '{0}' matched multiple types: {1}
        /// </summary>
        internal static string FormatViewComponent_AmbiguousTypeMatch(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_AmbiguousTypeMatch"), p0, p1);
        }

        /// <summary>
        /// The async view component method '{0}' should be declared to return Task&lt;T&gt;.
        /// </summary>
        internal static string ViewComponent_AsyncMethod_ShouldReturnTask
        {
            get { return GetString("ViewComponent_AsyncMethod_ShouldReturnTask"); }
        }

        /// <summary>
        /// The async view component method '{0}' should be declared to return Task&lt;T&gt;.
        /// </summary>
        internal static string FormatViewComponent_AsyncMethod_ShouldReturnTask(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_AsyncMethod_ShouldReturnTask"), p0);
        }

        /// <summary>
        /// A view component must return a non-null value.
        /// </summary>
        internal static string ViewComponent_MustReturnValue
        {
            get { return GetString("ViewComponent_MustReturnValue"); }
        }

        /// <summary>
        /// A view component must return a non-null value.
        /// </summary>
        internal static string FormatViewComponent_MustReturnValue()
        {
            return GetString("ViewComponent_MustReturnValue");
        }

        /// <summary>
        /// The view component method '{0}' should be declared to return a value.
        /// </summary>
        internal static string ViewComponent_SyncMethod_ShouldReturnValue
        {
            get { return GetString("ViewComponent_SyncMethod_ShouldReturnValue"); }
        }

        /// <summary>
        /// The view component method '{0}' should be declared to return a value.
        /// </summary>
        internal static string FormatViewComponent_SyncMethod_ShouldReturnValue(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_SyncMethod_ShouldReturnValue"), p0);
        }

        /// <summary>
        /// A view component named '{0}' could not be found.
        /// </summary>
        internal static string ViewComponent_CannotFindComponent
        {
            get { return GetString("ViewComponent_CannotFindComponent"); }
        }

        /// <summary>
        /// A view component named '{0}' could not be found.
        /// </summary>
        internal static string FormatViewComponent_CannotFindComponent(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_CannotFindComponent"), p0);
        }

        /// <summary>
        /// An invoker could not be created for the view component '{0}'.
        /// </summary>
        internal static string ViewComponent_IViewComponentFactory_ReturnedNull
        {
            get { return GetString("ViewComponent_IViewComponentFactory_ReturnedNull"); }
        }

        /// <summary>
        /// An invoker could not be created for the view component '{0}'.
        /// </summary>
        internal static string FormatViewComponent_IViewComponentFactory_ReturnedNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_IViewComponentFactory_ReturnedNull"), p0);
        }

        /// <summary>
        /// Could not find an '{0}' method matching the parameters.
        /// </summary>
        internal static string ViewComponent_CannotFindMethod
        {
            get { return GetString("ViewComponent_CannotFindMethod"); }
        }

        /// <summary>
        /// Could not find an '{0}' method matching the parameters.
        /// </summary>
        internal static string FormatViewComponent_CannotFindMethod(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_CannotFindMethod"), p0);
        }

        /// <summary>
        /// Could not find an '{0}' or '{1}' method matching the parameters.
        /// </summary>
        internal static string ViewComponent_CannotFindMethod_WithFallback
        {
            get { return GetString("ViewComponent_CannotFindMethod_WithFallback"); }
        }

        /// <summary>
        /// Could not find an '{0}' or '{1}' method matching the parameters.
        /// </summary>
        internal static string FormatViewComponent_CannotFindMethod_WithFallback(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_CannotFindMethod_WithFallback"), p0, p1);
        }

        /// <summary>
        /// View components only support returning {0}, {1} or {2}.
        /// </summary>
        internal static string ViewComponent_InvalidReturnValue
        {
            get { return GetString("ViewComponent_InvalidReturnValue"); }
        }

        /// <summary>
        /// View components only support returning {0}, {1} or {2}.
        /// </summary>
        internal static string FormatViewComponent_InvalidReturnValue(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_InvalidReturnValue"), p0, p1, p2);
        }

        /// <summary>
        /// Replacing the action context is not supported.
        /// </summary>
        internal static string ActionContextAccessor_SetValueNotSupported
        {
            get { return GetString("ActionContextAccessor_SetValueNotSupported"); }
        }

        /// <summary>
        /// Replacing the action context is not supported.
        /// </summary>
        internal static string FormatActionContextAccessor_SetValueNotSupported()
        {
            return GetString("ActionContextAccessor_SetValueNotSupported");
        }

        /// <summary>
        /// An action invoker could not be created for action '{0}'.
        /// </summary>
        internal static string ActionInvokerFactory_CouldNotCreateInvoker
        {
            get { return GetString("ActionInvokerFactory_CouldNotCreateInvoker"); }
        }

        /// <summary>
        /// An action invoker could not be created for action '{0}'.
        /// </summary>
        internal static string FormatActionInvokerFactory_CouldNotCreateInvoker(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ActionInvokerFactory_CouldNotCreateInvoker"), p0);
        }

        /// <summary>
        /// The action descriptor must be of type '{0}'.
        /// </summary>
        internal static string DefaultControllerFactory_ActionDescriptorMustBeReflected
        {
            get { return GetString("DefaultControllerFactory_ActionDescriptorMustBeReflected"); }
        }

        /// <summary>
        /// The action descriptor must be of type '{0}'.
        /// </summary>
        internal static string FormatDefaultControllerFactory_ActionDescriptorMustBeReflected(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DefaultControllerFactory_ActionDescriptorMustBeReflected"), p0);
        }

        /// <summary>
        /// The value cannot be null or empty.
        /// </summary>
        internal static string ArgumentCannotBeNullOrEmpty
        {
            get { return GetString("ArgumentCannotBeNullOrEmpty"); }
        }

        /// <summary>
        /// The value cannot be null or empty.
        /// </summary>
        internal static string FormatArgumentCannotBeNullOrEmpty()
        {
            return GetString("ArgumentCannotBeNullOrEmpty");
        }

        /// <summary>
        /// The '{0}' property of '{1}' must not be null.
        /// </summary>
        internal static string PropertyOfTypeCannotBeNull
        {
            get { return GetString("PropertyOfTypeCannotBeNull"); }
        }

        /// <summary>
        /// The '{0}' property of '{1}' must not be null.
        /// </summary>
        internal static string FormatPropertyOfTypeCannotBeNull(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyOfTypeCannotBeNull"), p0, p1);
        }

        /// <summary>
        /// The '{0}' method of type '{1}' cannot return a null value.
        /// </summary>
        internal static string TypeMethodMustReturnNotNullValue
        {
            get { return GetString("TypeMethodMustReturnNotNullValue"); }
        }

        /// <summary>
        /// The '{0}' method of type '{1}' cannot return a null value.
        /// </summary>
        internal static string FormatTypeMethodMustReturnNotNullValue(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeMethodMustReturnNotNullValue"), p0, p1);
        }

        /// <summary>
        /// The supplied route values are ambiguous and can select multiple sets of actions.
        /// </summary>
        internal static string ActionSelector_GetCandidateActionsIsAmbiguous
        {
            get { return GetString("ActionSelector_GetCandidateActionsIsAmbiguous"); }
        }

        /// <summary>
        /// The supplied route values are ambiguous and can select multiple sets of actions.
        /// </summary>
        internal static string FormatActionSelector_GetCandidateActionsIsAmbiguous()
        {
            return GetString("ActionSelector_GetCandidateActionsIsAmbiguous");
        }

        /// <summary>
        /// Property '{0}' is of type '{1}', but this method requires a value of type '{2}'.
        /// </summary>
        internal static string ArgumentPropertyUnexpectedType
        {
            get { return GetString("ArgumentPropertyUnexpectedType"); }
        }

        /// <summary>
        /// Property '{0}' is of type '{1}', but this method requires a value of type '{2}'.
        /// </summary>
        internal static string FormatArgumentPropertyUnexpectedType(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentPropertyUnexpectedType"), p0, p1, p2);
        }

        /// <summary>
        /// The partial view '{0}' was not found or no view engine supports the searched locations. The following locations were searched:{1}
        /// </summary>
        internal static string Common_PartialViewNotFound
        {
            get { return GetString("Common_PartialViewNotFound"); }
        }

        /// <summary>
        /// The partial view '{0}' was not found or no view engine supports the searched locations. The following locations were searched:{1}
        /// </summary>
        internal static string FormatCommon_PartialViewNotFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Common_PartialViewNotFound"), p0, p1);
        }

        /// <summary>
        /// The value '{0}' is invalid.
        /// </summary>
        internal static string Common_ValueNotValidForProperty
        {
            get { return GetString("Common_ValueNotValidForProperty"); }
        }

        /// <summary>
        /// The value '{0}' is invalid.
        /// </summary>
        internal static string FormatCommon_ValueNotValidForProperty(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Common_ValueNotValidForProperty"), p0);
        }

        /// <summary>
        /// False
        /// </summary>
        internal static string Common_TriState_False
        {
            get { return GetString("Common_TriState_False"); }
        }

        /// <summary>
        /// False
        /// </summary>
        internal static string FormatCommon_TriState_False()
        {
            return GetString("Common_TriState_False");
        }

        /// <summary>
        /// Not Set
        /// </summary>
        internal static string Common_TriState_NotSet
        {
            get { return GetString("Common_TriState_NotSet"); }
        }

        /// <summary>
        /// Not Set
        /// </summary>
        internal static string FormatCommon_TriState_NotSet()
        {
            return GetString("Common_TriState_NotSet");
        }

        /// <summary>
        /// True
        /// </summary>
        internal static string Common_TriState_True
        {
            get { return GetString("Common_TriState_True"); }
        }

        /// <summary>
        /// True
        /// </summary>
        internal static string FormatCommon_TriState_True()
        {
            return GetString("Common_TriState_True");
        }

        /// <summary>
        /// ViewData value must not be null.
        /// </summary>
        internal static string DynamicViewData_ViewDataNull
        {
            get { return GetString("DynamicViewData_ViewDataNull"); }
        }

        /// <summary>
        /// ViewData value must not be null.
        /// </summary>
        internal static string FormatDynamicViewData_ViewDataNull()
        {
            return GetString("DynamicViewData_ViewDataNull");
        }

        /// <summary>
        /// The expression compiler was unable to evaluate the indexer expression '{0}' because it references the model parameter '{1}' which is unavailable.
        /// </summary>
        internal static string ExpressionHelper_InvalidIndexerExpression
        {
            get { return GetString("ExpressionHelper_InvalidIndexerExpression"); }
        }

        /// <summary>
        /// The expression compiler was unable to evaluate the indexer expression '{0}' because it references the model parameter '{1}' which is unavailable.
        /// </summary>
        internal static string FormatExpressionHelper_InvalidIndexerExpression(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ExpressionHelper_InvalidIndexerExpression"), p0, p1);
        }

        /// <summary>
        /// The IModelMetadataProvider was unable to provide metadata for expression '{0}'.
        /// </summary>
        internal static string HtmlHelper_NullModelMetadata
        {
            get { return GetString("HtmlHelper_NullModelMetadata"); }
        }

        /// <summary>
        /// The IModelMetadataProvider was unable to provide metadata for expression '{0}'.
        /// </summary>
        internal static string FormatHtmlHelper_NullModelMetadata(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("HtmlHelper_NullModelMetadata"), p0);
        }

        /// <summary>
        /// Must call 'Contextualize' method before using this HtmlHelper instance.
        /// </summary>
        internal static string HtmlHelper_NotContextualized
        {
            get { return GetString("HtmlHelper_NotContextualized"); }
        }

        /// <summary>
        /// Must call 'Contextualize' method before using this HtmlHelper instance.
        /// </summary>
        internal static string FormatHtmlHelper_NotContextualized()
        {
            return GetString("HtmlHelper_NotContextualized");
        }

        /// <summary>
        /// There is no ViewData item of type '{0}' that has the key '{1}'.
        /// </summary>
        internal static string HtmlHelper_MissingSelectData
        {
            get { return GetString("HtmlHelper_MissingSelectData"); }
        }

        /// <summary>
        /// There is no ViewData item of type '{0}' that has the key '{1}'.
        /// </summary>
        internal static string FormatHtmlHelper_MissingSelectData(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("HtmlHelper_MissingSelectData"), p0, p1);
        }

        /// <summary>
        /// The parameter '{0}' must evaluate to an IEnumerable when multiple selection is allowed.
        /// </summary>
        internal static string HtmlHelper_SelectExpressionNotEnumerable
        {
            get { return GetString("HtmlHelper_SelectExpressionNotEnumerable"); }
        }

        /// <summary>
        /// The parameter '{0}' must evaluate to an IEnumerable when multiple selection is allowed.
        /// </summary>
        internal static string FormatHtmlHelper_SelectExpressionNotEnumerable(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("HtmlHelper_SelectExpressionNotEnumerable"), p0);
        }

        /// <summary>
        /// The ViewData item that has the key '{0}' is of type '{1}' but must be of type '{2}'.
        /// </summary>
        internal static string HtmlHelper_WrongSelectDataType
        {
            get { return GetString("HtmlHelper_WrongSelectDataType"); }
        }

        /// <summary>
        /// The ViewData item that has the key '{0}' is of type '{1}' but must be of type '{2}'.
        /// </summary>
        internal static string FormatHtmlHelper_WrongSelectDataType(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("HtmlHelper_WrongSelectDataType"), p0, p1, p2);
        }

        /// <summary>
        /// The '{0}' template was used with an object of type '{1}', which does not implement '{2}'.
        /// </summary>
        internal static string Templates_TypeMustImplementIEnumerable
        {
            get { return GetString("Templates_TypeMustImplementIEnumerable"); }
        }

        /// <summary>
        /// The '{0}' template was used with an object of type '{1}', which does not implement '{2}'.
        /// </summary>
        internal static string FormatTemplates_TypeMustImplementIEnumerable(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Templates_TypeMustImplementIEnumerable"), p0, p1, p2);
        }

        /// <summary>
        /// Templates can be used only with field access, property access, single-dimension array index, or single-parameter custom indexer expressions.
        /// </summary>
        internal static string TemplateHelpers_TemplateLimitations
        {
            get { return GetString("TemplateHelpers_TemplateLimitations"); }
        }

        /// <summary>
        /// Templates can be used only with field access, property access, single-dimension array index, or single-parameter custom indexer expressions.
        /// </summary>
        internal static string FormatTemplateHelpers_TemplateLimitations()
        {
            return GetString("TemplateHelpers_TemplateLimitations");
        }

        /// <summary>
        /// Unable to locate an appropriate template for type {0}.
        /// </summary>
        internal static string TemplateHelpers_NoTemplate
        {
            get { return GetString("TemplateHelpers_NoTemplate"); }
        }

        /// <summary>
        /// Unable to locate an appropriate template for type {0}.
        /// </summary>
        internal static string FormatTemplateHelpers_NoTemplate(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TemplateHelpers_NoTemplate"), p0);
        }

        /// <summary>
        /// The model item passed is null, but this ViewDataDictionary instance requires a non-null model item of type '{0}'.
        /// </summary>
        internal static string ViewData_ModelCannotBeNull
        {
            get { return GetString("ViewData_ModelCannotBeNull"); }
        }

        /// <summary>
        /// The model item passed is null, but this ViewDataDictionary instance requires a non-null model item of type '{0}'.
        /// </summary>
        internal static string FormatViewData_ModelCannotBeNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewData_ModelCannotBeNull"), p0);
        }

        /// <summary>
        /// The model item passed into the ViewDataDictionary is of type '{0}', but this ViewDataDictionary instance requires a model item of type '{1}'.
        /// </summary>
        internal static string ViewData_WrongTModelType
        {
            get { return GetString("ViewData_WrongTModelType"); }
        }

        /// <summary>
        /// The model item passed into the ViewDataDictionary is of type '{0}', but this ViewDataDictionary instance requires a model item of type '{1}'.
        /// </summary>
        internal static string FormatViewData_WrongTModelType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewData_WrongTModelType"), p0, p1);
        }

        /// <summary>
        /// No route matches the supplied values.
        /// </summary>
        internal static string NoRoutesMatched
        {
            get { return GetString("NoRoutesMatched"); }
        }

        /// <summary>
        /// No route matches the supplied values.
        /// </summary>
        internal static string FormatNoRoutesMatched()
        {
            return GetString("NoRoutesMatched");
        }

        /// <summary>
        /// If an {0} provides a result value by setting the {1} property of {2} to a non-null value, then it cannot call the next filter by invoking {3}.
        /// </summary>
        internal static string AsyncActionFilter_InvalidShortCircuit
        {
            get { return GetString("AsyncActionFilter_InvalidShortCircuit"); }
        }

        /// <summary>
        /// If an {0} provides a result value by setting the {1} property of {2} to a non-null value, then it cannot call the next filter by invoking {3}.
        /// </summary>
        internal static string FormatAsyncActionFilter_InvalidShortCircuit(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AsyncActionFilter_InvalidShortCircuit"), p0, p1, p2, p3);
        }

        /// <summary>
        /// If an {0} cancels execution by setting the {1} property of {2} to 'true', then it cannot call the next filter by invoking {3}.
        /// </summary>
        internal static string AsyncResultFilter_InvalidShortCircuit
        {
            get { return GetString("AsyncResultFilter_InvalidShortCircuit"); }
        }

        /// <summary>
        /// If an {0} cancels execution by setting the {1} property of {2} to 'true', then it cannot call the next filter by invoking {3}.
        /// </summary>
        internal static string FormatAsyncResultFilter_InvalidShortCircuit(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AsyncResultFilter_InvalidShortCircuit"), p0, p1, p2, p3);
        }

        /// <summary>
        /// The partial view '{0}' was not found. The following locations were searched:{1}
        /// </summary>
        internal static string ViewEngine_PartialViewNotFound
        {
            get { return GetString("ViewEngine_PartialViewNotFound"); }
        }

        /// <summary>
        /// The partial view '{0}' was not found. The following locations were searched:{1}
        /// </summary>
        internal static string FormatViewEngine_PartialViewNotFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewEngine_PartialViewNotFound"), p0, p1);
        }

        /// <summary>
        /// The view '{0}' was not found. The following locations were searched:{1}.
        /// </summary>
        internal static string ViewEngine_ViewNotFound
        {
            get { return GetString("ViewEngine_ViewNotFound"); }
        }

        /// <summary>
        /// The view '{0}' was not found. The following locations were searched:{1}.
        /// </summary>
        internal static string FormatViewEngine_ViewNotFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewEngine_ViewNotFound"), p0, p1);
        }

        /// <summary>
        /// Unable to locate an implementation of IAuthorizationService.
        /// </summary>
        internal static string AuthorizeAttribute_AuthorizationServiceMustBeDefined
        {
            get { return GetString("AuthorizeAttribute_AuthorizationServiceMustBeDefined"); }
        }

        /// <summary>
        /// Unable to locate an implementation of IAuthorizationService.
        /// </summary>
        internal static string FormatAuthorizeAttribute_AuthorizationServiceMustBeDefined()
        {
            return GetString("AuthorizeAttribute_AuthorizationServiceMustBeDefined");
        }

        /// <summary>
        /// OnAuthorization is not implemented by this filter, use OnAuthorizationAsync instead.
        /// </summary>
        internal static string AuthorizeAttribute_OnAuthorizationNotImplemented
        {
            get { return GetString("AuthorizeAttribute_OnAuthorizationNotImplemented"); }
        }

        /// <summary>
        /// OnAuthorization is not implemented by this filter, use OnAuthorizationAsync instead.
        /// </summary>
        internal static string FormatAuthorizeAttribute_OnAuthorizationNotImplemented()
        {
            return GetString("AuthorizeAttribute_OnAuthorizationNotImplemented");
        }

        /// <summary>
        /// The value must be greater than or equal to zero.
        /// </summary>
        internal static string HtmlHelper_TextAreaParameterOutOfRange
        {
            get { return GetString("HtmlHelper_TextAreaParameterOutOfRange"); }
        }

        /// <summary>
        /// The value must be greater than or equal to zero.
        /// </summary>
        internal static string FormatHtmlHelper_TextAreaParameterOutOfRange()
        {
            return GetString("HtmlHelper_TextAreaParameterOutOfRange");
        }

        /// <summary>
        /// The type provided to '{0}' must implement '{1}'.
        /// </summary>
        internal static string FilterFactoryAttribute_TypeMustImplementIFilter
        {
            get { return GetString("FilterFactoryAttribute_TypeMustImplementIFilter"); }
        }

        /// <summary>
        /// The type provided to '{0}' must implement '{1}'.
        /// </summary>
        internal static string FormatFilterFactoryAttribute_TypeMustImplementIFilter(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("FilterFactoryAttribute_TypeMustImplementIFilter"), p0, p1);
        }

        /// <summary>
        /// Validation parameter names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationParameterCannotBeEmpty
        {
            get { return GetString("UnobtrusiveJavascript_ValidationParameterCannotBeEmpty"); }
        }

        /// <summary>
        /// Validation parameter names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationParameterCannotBeEmpty(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationParameterCannotBeEmpty"), p0);
        }

        /// <summary>
        /// Validation parameter names in unobtrusive client validation rules must start with a lowercase letter and consist of only lowercase letters or digits. Validation parameter name: {0}, client rule type: {1}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationParameterMustBeLegal
        {
            get { return GetString("UnobtrusiveJavascript_ValidationParameterMustBeLegal"); }
        }

        /// <summary>
        /// Validation parameter names in unobtrusive client validation rules must start with a lowercase letter and consist of only lowercase letters or digits. Validation parameter name: {0}, client rule type: {1}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationParameterMustBeLegal(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationParameterMustBeLegal"), p0, p1);
        }

        /// <summary>
        /// Validation type names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationTypeCannotBeEmpty
        {
            get { return GetString("UnobtrusiveJavascript_ValidationTypeCannotBeEmpty"); }
        }

        /// <summary>
        /// Validation type names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationTypeCannotBeEmpty(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationTypeCannotBeEmpty"), p0);
        }

        /// <summary>
        /// Validation type names in unobtrusive client validation rules must consist of only lowercase letters. Invalid name: "{0}", client rule type: {1}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationTypeMustBeLegal
        {
            get { return GetString("UnobtrusiveJavascript_ValidationTypeMustBeLegal"); }
        }

        /// <summary>
        /// Validation type names in unobtrusive client validation rules must consist of only lowercase letters. Invalid name: "{0}", client rule type: {1}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationTypeMustBeLegal(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationTypeMustBeLegal"), p0, p1);
        }

        /// <summary>
        /// Validation type names in unobtrusive client validation rules must be unique. The following validation type was seen more than once: {0}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationTypeMustBeUnique
        {
            get { return GetString("UnobtrusiveJavascript_ValidationTypeMustBeUnique"); }
        }

        /// <summary>
        /// Validation type names in unobtrusive client validation rules must be unique. The following validation type was seen more than once: {0}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationTypeMustBeUnique(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationTypeMustBeUnique"), p0);
        }

        /// <summary>
        /// Cannot return null from an action method with a return type of '{0}'.
        /// </summary>
        internal static string ActionResult_ActionReturnValueCannotBeNull
        {
            get { return GetString("ActionResult_ActionReturnValueCannotBeNull"); }
        }

        /// <summary>
        /// Cannot return null from an action method with a return type of '{0}'.
        /// </summary>
        internal static string FormatActionResult_ActionReturnValueCannotBeNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ActionResult_ActionReturnValueCannotBeNull"), p0);
        }

        /// <summary>
        /// Value types cannot be activated by '{0}'.
        /// </summary>
        internal static string ValueTypesCannotBeActivated
        {
            get { return GetString("ValueTypesCannotBeActivated"); }
        }

        /// <summary>
        /// Value types cannot be activated by '{0}'.
        /// </summary>
        internal static string FormatValueTypesCannotBeActivated(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ValueTypesCannotBeActivated"), p0);
        }

        /// <summary>
        /// The type '{0}' must derive from '{1}'.
        /// </summary>
        internal static string TypeMustDeriveFromType
        {
            get { return GetString("TypeMustDeriveFromType"); }
        }

        /// <summary>
        /// The type '{0}' must derive from '{1}'.
        /// </summary>
        internal static string FormatTypeMustDeriveFromType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeMustDeriveFromType"), p0, p1);
        }

        /// <summary>
        /// No encoding found for output formatter '{0}'. There must be at least one supported encoding registered in order for the output formatter to write content.
        /// </summary>
        internal static string OutputFormatterNoEncoding
        {
            get { return GetString("OutputFormatterNoEncoding"); }
        }

        /// <summary>
        /// No encoding found for output formatter '{0}'. There must be at least one supported encoding registered in order for the output formatter to write content.
        /// </summary>
        internal static string FormatOutputFormatterNoEncoding(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("OutputFormatterNoEncoding"), p0);
        }

        /// <summary>
        /// No encoding found for input formatter '{0}'. There must be at least one supported encoding registered in order for the formatter to read content.
        /// </summary>
        internal static string InputFormatterNoEncoding
        {
            get { return GetString("InputFormatterNoEncoding"); }
        }

        /// <summary>
        /// No encoding found for input formatter '{0}'. There must be at least one supported encoding registered in order for the formatter to read content.
        /// </summary>
        internal static string FormatInputFormatterNoEncoding(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InputFormatterNoEncoding"), p0);
        }

        /// <summary>
        /// Unsupported content type '{0}'.
        /// </summary>
        internal static string UnsupportedContentType
        {
            get { return GetString("UnsupportedContentType"); }
        }

        /// <summary>
        /// Unsupported content type '{0}'.
        /// </summary>
        internal static string FormatUnsupportedContentType(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedContentType"), p0);
        }

        /// <summary>
        /// No supported media type registered for output formatter '{0}'. There must be at least one supported media type registered in order for the output formatter to write content.
        /// </summary>
        internal static string OutputFormatterNoMediaType
        {
            get { return GetString("OutputFormatterNoMediaType"); }
        }

        /// <summary>
        /// No supported media type registered for output formatter '{0}'. There must be at least one supported media type registered in order for the output formatter to write content.
        /// </summary>
        internal static string FormatOutputFormatterNoMediaType(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("OutputFormatterNoMediaType"), p0);
        }

        /// <summary>
        /// The following errors occurred with attribute routing information:{0}{0}{1}
        /// </summary>
        internal static string AttributeRoute_AggregateErrorMessage
        {
            get { return GetString("AttributeRoute_AggregateErrorMessage"); }
        }

        /// <summary>
        /// The following errors occurred with attribute routing information:{0}{0}{1}
        /// </summary>
        internal static string FormatAttributeRoute_AggregateErrorMessage(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_AggregateErrorMessage"), p0, p1);
        }

        /// <summary>
        /// The attribute route '{0}' cannot contain a parameter named '{{{1}}}'. Use '[{1}]' in the route template to insert the value '{2}'.
        /// </summary>
        internal static string AttributeRoute_CannotContainParameter
        {
            get { return GetString("AttributeRoute_CannotContainParameter"); }
        }

        /// <summary>
        /// The attribute route '{0}' cannot contain a parameter named '{{{1}}}'. Use '[{1}]' in the route template to insert the value '{2}'.
        /// </summary>
        internal static string FormatAttributeRoute_CannotContainParameter(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_CannotContainParameter"), p0, p1, p2);
        }

        /// <summary>
        /// For action: '{0}'{1}Error: {2}
        /// </summary>
        internal static string AttributeRoute_IndividualErrorMessage
        {
            get { return GetString("AttributeRoute_IndividualErrorMessage"); }
        }

        /// <summary>
        /// For action: '{0}'{1}Error: {2}
        /// </summary>
        internal static string FormatAttributeRoute_IndividualErrorMessage(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_IndividualErrorMessage"), p0, p1, p2);
        }

        /// <summary>
        /// An empty replacement token ('[]') is not allowed.
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_EmptyTokenNotAllowed
        {
            get { return GetString("AttributeRoute_TokenReplacement_EmptyTokenNotAllowed"); }
        }

        /// <summary>
        /// An empty replacement token ('[]') is not allowed.
        /// </summary>
        internal static string FormatAttributeRoute_TokenReplacement_EmptyTokenNotAllowed()
        {
            return GetString("AttributeRoute_TokenReplacement_EmptyTokenNotAllowed");
        }

        /// <summary>
        /// Token delimiters ('[', ']') are imbalanced.
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_ImbalancedSquareBrackets
        {
            get { return GetString("AttributeRoute_TokenReplacement_ImbalancedSquareBrackets"); }
        }

        /// <summary>
        /// Token delimiters ('[', ']') are imbalanced.
        /// </summary>
        internal static string FormatAttributeRoute_TokenReplacement_ImbalancedSquareBrackets()
        {
            return GetString("AttributeRoute_TokenReplacement_ImbalancedSquareBrackets");
        }

        /// <summary>
        /// The route template '{0}' has invalid syntax. {1}
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_InvalidSyntax
        {
            get { return GetString("AttributeRoute_TokenReplacement_InvalidSyntax"); }
        }

        /// <summary>
        /// The route template '{0}' has invalid syntax. {1}
        /// </summary>
        internal static string FormatAttributeRoute_TokenReplacement_InvalidSyntax(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_TokenReplacement_InvalidSyntax"), p0, p1);
        }

        /// <summary>
        /// While processing template '{0}', a replacement value for the token '{1}' could not be found. Available tokens: '{2}'.
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_ReplacementValueNotFound
        {
            get { return GetString("AttributeRoute_TokenReplacement_ReplacementValueNotFound"); }
        }

        /// <summary>
        /// While processing template '{0}', a replacement value for the token '{1}' could not be found. Available tokens: '{2}'.
        /// </summary>
        internal static string FormatAttributeRoute_TokenReplacement_ReplacementValueNotFound(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_TokenReplacement_ReplacementValueNotFound"), p0, p1, p2);
        }

        /// <summary>
        /// A replacement token is not closed.
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_UnclosedToken
        {
            get { return GetString("AttributeRoute_TokenReplacement_UnclosedToken"); }
        }

        /// <summary>
        /// A replacement token is not closed.
        /// </summary>
        internal static string FormatAttributeRoute_TokenReplacement_UnclosedToken()
        {
            return GetString("AttributeRoute_TokenReplacement_UnclosedToken");
        }

        /// <summary>
        /// An unescaped '[' token is not allowed inside of a replacement token. Use '[[' to escape.
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_UnescapedBraceInToken
        {
            get { return GetString("AttributeRoute_TokenReplacement_UnescapedBraceInToken"); }
        }

        /// <summary>
        /// An unescaped '[' token is not allowed inside of a replacement token. Use '[[' to escape.
        /// </summary>
        internal static string FormatAttributeRoute_TokenReplacement_UnescapedBraceInToken()
        {
            return GetString("AttributeRoute_TokenReplacement_UnescapedBraceInToken");
        }

        /// <summary>
        /// The value must be either '{0}' or '{1}'.
        /// </summary>
        internal static string RouteConstraintAttribute_InvalidKeyHandlingValue
        {
            get { return GetString("RouteConstraintAttribute_InvalidKeyHandlingValue"); }
        }

        /// <summary>
        /// The value must be either '{0}' or '{1}'.
        /// </summary>
        internal static string FormatRouteConstraintAttribute_InvalidKeyHandlingValue(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RouteConstraintAttribute_InvalidKeyHandlingValue"), p0, p1);
        }

        /// <summary>
        /// Unable to find the required services. Please add all the required services by calling '{0}' inside the call to '{1}' or '{2}' in the application startup code.
        /// </summary>
        internal static string UnableToFindServices
        {
            get { return GetString("UnableToFindServices"); }
        }

        /// <summary>
        /// Unable to find the required services. Please add all the required services by calling '{0}' inside the call to '{1}' or '{2}' in the application startup code.
        /// </summary>
        internal static string FormatUnableToFindServices(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToFindServices"), p0, p1, p2);
        }

        /// <summary>
        /// Two or more routes named '{0}' have different templates.
        /// </summary>
        internal static string AttributeRoute_DifferentLinkGenerationEntries_SameName
        {
            get { return GetString("AttributeRoute_DifferentLinkGenerationEntries_SameName"); }
        }

        /// <summary>
        /// Two or more routes named '{0}' have different templates.
        /// </summary>
        internal static string FormatAttributeRoute_DifferentLinkGenerationEntries_SameName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_DifferentLinkGenerationEntries_SameName"), p0);
        }

        /// <summary>
        /// Action: '{0}' - Template: '{1}'
        /// </summary>
        internal static string AttributeRoute_DuplicateNames_Item
        {
            get { return GetString("AttributeRoute_DuplicateNames_Item"); }
        }

        /// <summary>
        /// Action: '{0}' - Template: '{1}'
        /// </summary>
        internal static string FormatAttributeRoute_DuplicateNames_Item(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_DuplicateNames_Item"), p0, p1);
        }

        /// <summary>
        /// Attribute routes with the same name '{0}' must have the same template:{1}{2}
        /// </summary>
        internal static string AttributeRoute_DuplicateNames
        {
            get { return GetString("AttributeRoute_DuplicateNames"); }
        }

        /// <summary>
        /// Attribute routes with the same name '{0}' must have the same template:{1}{2}
        /// </summary>
        internal static string FormatAttributeRoute_DuplicateNames(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_DuplicateNames"), p0, p1, p2);
        }

        /// <summary>
        /// Error {0}:{1}{2}
        /// </summary>
        internal static string AttributeRoute_AggregateErrorMessage_ErrorNumber
        {
            get { return GetString("AttributeRoute_AggregateErrorMessage_ErrorNumber"); }
        }

        /// <summary>
        /// Error {0}:{1}{2}
        /// </summary>
        internal static string FormatAttributeRoute_AggregateErrorMessage_ErrorNumber(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_AggregateErrorMessage_ErrorNumber"), p0, p1, p2);
        }

        /// <summary>
        /// Could not find a replacement for view expansion token '{0}'.
        /// </summary>
        internal static string TemplatedViewLocationExpander_NoReplacementToken
        {
            get { return GetString("TemplatedViewLocationExpander_NoReplacementToken"); }
        }

        /// <summary>
        /// Could not find a replacement for view expansion token '{0}'.
        /// </summary>
        internal static string FormatTemplatedViewLocationExpander_NoReplacementToken(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TemplatedViewLocationExpander_NoReplacementToken"), p0);
        }

        /// <summary>
        /// {0} must be executed before {1} can be invoked.
        /// </summary>
        internal static string TemplatedExpander_PopulateValuesMustBeInvokedFirst
        {
            get { return GetString("TemplatedExpander_PopulateValuesMustBeInvokedFirst"); }
        }

        /// <summary>
        /// {0} must be executed before {1} can be invoked.
        /// </summary>
        internal static string FormatTemplatedExpander_PopulateValuesMustBeInvokedFirst(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TemplatedExpander_PopulateValuesMustBeInvokedFirst"), p0, p1);
        }

        /// <summary>
        /// The result of value factory cannot be null.
        /// </summary>
        internal static string TemplatedExpander_ValueFactoryCannotReturnNull
        {
            get { return GetString("TemplatedExpander_ValueFactoryCannotReturnNull"); }
        }

        /// <summary>
        /// The result of value factory cannot be null.
        /// </summary>
        internal static string FormatTemplatedExpander_ValueFactoryCannotReturnNull()
        {
            return GetString("TemplatedExpander_ValueFactoryCannotReturnNull");
        }

        /// <summary>
        /// A method '{0}' that defines attribute routed actions must not have attributes that implement '{1}' and do not implement '{2}':{3}{4}
        /// </summary>
        internal static string AttributeRoute_InvalidHttpConstraints
        {
            get { return GetString("AttributeRoute_InvalidHttpConstraints"); }
        }

        /// <summary>
        /// A method '{0}' that defines attribute routed actions must not have attributes that implement '{1}' and do not implement '{2}':{3}{4}
        /// </summary>
        internal static string FormatAttributeRoute_InvalidHttpConstraints(object p0, object p1, object p2, object p3, object p4)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_InvalidHttpConstraints"), p0, p1, p2, p3, p4);
        }

        /// <summary>
        /// Action '{0}' with route template '{1}' has '{2}' invalid '{3}' attributes.
        /// </summary>
        internal static string AttributeRoute_InvalidHttpConstraints_Item
        {
            get { return GetString("AttributeRoute_InvalidHttpConstraints_Item"); }
        }

        /// <summary>
        /// Action '{0}' with route template '{1}' has '{2}' invalid '{3}' attributes.
        /// </summary>
        internal static string FormatAttributeRoute_InvalidHttpConstraints_Item(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_InvalidHttpConstraints_Item"), p0, p1, p2, p3);
        }

        /// <summary>
        /// A method '{0}' must not define attribute routed actions and non attribute routed actions at the same time:{1}{2}
        /// </summary>
        internal static string AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod
        {
            get { return GetString("AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod"); }
        }

        /// <summary>
        /// A method '{0}' must not define attribute routed actions and non attribute routed actions at the same time:{1}{2}
        /// </summary>
        internal static string FormatAttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod"), p0, p1, p2);
        }

        /// <summary>
        /// Action: '{0}' - Template: '{1}'
        /// </summary>
        internal static string AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod_Item
        {
            get { return GetString("AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod_Item"); }
        }

        /// <summary>
        /// Action: '{0}' - Template: '{1}'
        /// </summary>
        internal static string FormatAttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod_Item(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod_Item"), p0, p1);
        }

        /// <summary>
        /// (none)
        /// </summary>
        internal static string AttributeRoute_NullTemplateRepresentation
        {
            get { return GetString("AttributeRoute_NullTemplateRepresentation"); }
        }

        /// <summary>
        /// (none)
        /// </summary>
        internal static string FormatAttributeRoute_NullTemplateRepresentation()
        {
            return GetString("AttributeRoute_NullTemplateRepresentation");
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
