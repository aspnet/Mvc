// <auto-generated />
namespace Microsoft.AspNetCore.Mvc.RazorPages
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Mvc.RazorPages.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The route for the page at '{0}' cannot start with / or ~/. Pages do not support overriding the file path of the page.
        /// </summary>
        internal static string PageActionDescriptorProvider_RouteTemplateCannotBeOverrideable
        {
            get => GetString("PageActionDescriptorProvider_RouteTemplateCannotBeOverrideable");
        }

        /// <summary>
        /// The route for the page at '{0}' cannot start with / or ~/. Pages do not support overriding the file path of the page.
        /// </summary>
        internal static string FormatPageActionDescriptorProvider_RouteTemplateCannotBeOverrideable(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("PageActionDescriptorProvider_RouteTemplateCannotBeOverrideable"), p0);

        /// <summary>
        /// The '{0}' property of '{1}' must not be null.
        /// </summary>
        internal static string PropertyOfTypeCannotBeNull
        {
            get => GetString("PropertyOfTypeCannotBeNull");
        }

        /// <summary>
        /// The '{0}' property of '{1}' must not be null.
        /// </summary>
        internal static string FormatPropertyOfTypeCannotBeNull(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("PropertyOfTypeCannotBeNull"), p0, p1);

        /// <summary>
        /// Page created by '{0}' must be an instance of '{1}'.
        /// </summary>
        internal static string ActivatedInstance_MustBeAnInstanceOf
        {
            get => GetString("ActivatedInstance_MustBeAnInstanceOf");
        }

        /// <summary>
        /// Page created by '{0}' must be an instance of '{1}'.
        /// </summary>
        internal static string FormatActivatedInstance_MustBeAnInstanceOf(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("ActivatedInstance_MustBeAnInstanceOf"), p0, p1);

        /// <summary>
        /// The context used to execute '{0}' must be an instance of '{1}'. Returning a '{2}' from a controller is a not supported.
        /// </summary>
        internal static string PageViewResult_ContextIsInvalid
        {
            get => GetString("PageViewResult_ContextIsInvalid");
        }

        /// <summary>
        /// The context used to execute '{0}' must be an instance of '{1}'. Returning a '{2}' from a controller is a not supported.
        /// </summary>
        internal static string FormatPageViewResult_ContextIsInvalid(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("PageViewResult_ContextIsInvalid"), p0, p1, p2);

        /// <summary>
        /// Value cannot be null or empty.
        /// </summary>
        internal static string ArgumentCannotBeNullOrEmpty
        {
            get => GetString("ArgumentCannotBeNullOrEmpty");
        }

        /// <summary>
        /// Value cannot be null or empty.
        /// </summary>
        internal static string FormatArgumentCannotBeNullOrEmpty()
            => GetString("ArgumentCannotBeNullOrEmpty");

        /// <summary>
        /// Unsupported handler method return type '{0}'.
        /// </summary>
        internal static string UnsupportedHandlerMethodType
        {
            get => GetString("UnsupportedHandlerMethodType");
        }

        /// <summary>
        /// Unsupported handler method return type '{0}'.
        /// </summary>
        internal static string FormatUnsupportedHandlerMethodType(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedHandlerMethodType"), p0);

        /// <summary>
        /// Multiple handlers matched. The following handlers matched route data and had all constraints satisfied:{0}{0}{1}
        /// </summary>
        internal static string AmbiguousHandler
        {
            get => GetString("AmbiguousHandler");
        }

        /// <summary>
        /// Multiple handlers matched. The following handlers matched route data and had all constraints satisfied:{0}{0}{1}
        /// </summary>
        internal static string FormatAmbiguousHandler(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("AmbiguousHandler"), p0, p1);

        /// <summary>
        /// Path must be a root relative path that starts with a forward slash '/'.
        /// </summary>
        internal static string PathMustBeRootRelativePath
        {
            get => GetString("PathMustBeRootRelativePath");
        }

        /// <summary>
        /// Path must be an root relative path that starts with a forward slash '/'.
        /// </summary>
        internal static string FormatPathMustBeAnRelativePath()
            => GetString("PathMustBeAnRelativePath");

        /// <summary>
        /// If an {0} provides a result value by setting the {1} property of {2} to a non-null value, then it cannot call the next filter by invoking {3}.
        /// </summary>
        internal static string AsyncPageFilter_InvalidShortCircuit
        {
            get => GetString("AsyncPageFilter_InvalidShortCircuit");
        }

        /// <summary>
        /// If an {0} provides a result value by setting the {1} property of {2} to a non-null value, then it cannot call the next filter by invoking {3}.
        /// </summary>
        internal static string FormatAsyncPageFilter_InvalidShortCircuit(object p0, object p1, object p2, object p3)
            => string.Format(CultureInfo.CurrentCulture, GetString("AsyncPageFilter_InvalidShortCircuit"), p0, p1, p2, p3);

        /// <summary>
        /// The type '{0}' is not a valid page. A page must inherit from '{1}'.
        /// </summary>
        internal static string InvalidPageType_WrongBase
        {
            get => GetString("InvalidPageType_WrongBase");
        }

        /// <summary>
        /// The type '{0}' is not a valid page. A page must inherit from '{1}'.
        /// </summary>
        internal static string FormatInvalidPageType_WrongBase(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidPageType_WrongBase"), p0, p1);

        /// <summary>
        /// The type '{0}' is not a valid page. A page must define a public, non-static '{1}' property.
        /// </summary>
        internal static string InvalidPageType_NoModelProperty
        {
            get => GetString("InvalidPageType_NoModelProperty");
        }

        /// <summary>
        /// The type '{0}' is not a valid page. A page must define a public, non-static '{1}' property.
        /// </summary>
        internal static string FormatInvalidPageType_NoModelProperty(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidPageType_NoModelProperty"), p0, p1);

        /// <summary>
        /// '{0}' is not a valid page name. A page name is path relative to the Razor Pages root directory that starts with a leading forward slasg ('/') and does not contain the file extension.
        /// </summary>
        internal static string InvalidValidPageName
        {
            get => GetString("InvalidValidPageName");
        }

        /// <summary>
        /// '{0}' is not a valid page name. A page name is path relative to the Razor Pages root directory that starts with a leading forward slasg ('/') and does not contain the file extension.
        /// </summary>
        internal static string FormatInvalidValidPageName(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidValidPageName"), p0);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
