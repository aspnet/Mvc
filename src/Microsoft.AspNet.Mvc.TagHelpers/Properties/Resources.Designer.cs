// <auto-generated />
namespace Microsoft.AspNet.Mvc.TagHelpers
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNet.Mvc.TagHelpers.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// Cannot determine an '{4}' attribute for {0}. An {0} with a specified '{1}' must not have an '{2}' or '{3}' attribute.
        /// </summary>
        internal static string AnchorTagHelper_CannotDetermineHrefRouteActionOrControllerSpecified
        {
            get { return GetString("AnchorTagHelper_CannotDetermineHrefRouteActionOrControllerSpecified"); }
        }

        /// <summary>
        /// Cannot determine an '{4}' attribute for {0}. An {0} with a specified '{1}' must not have an '{2}' or '{3}' attribute.
        /// </summary>
        internal static string FormatAnchorTagHelper_CannotDetermineHrefRouteActionOrControllerSpecified(object p0, object p1, object p2, object p3, object p4)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AnchorTagHelper_CannotDetermineHrefRouteActionOrControllerSpecified"), p0, p1, p2, p3, p4);
        }

        /// <summary>
        /// Cannot override the '{8}' attribute for {0}. An {0} with a specified '{8}' must not have attributes starting with '{7}' or an '{1}', '{2}', '{3}', '{4}', '{5}', or '{6}' attribute.
        /// </summary>
        internal static string AnchorTagHelper_CannotOverrideHref
        {
            get { return GetString("AnchorTagHelper_CannotOverrideHref"); }
        }

        /// <summary>
        /// Cannot override the '{8}' attribute for {0}. An {0} with a specified '{8}' must not have attributes starting with '{7}' or an '{1}', '{2}', '{3}', '{4}', '{5}', or '{6}' attribute.
        /// </summary>
        internal static string FormatAnchorTagHelper_CannotOverrideHref(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AnchorTagHelper_CannotOverrideHref"), p0, p1, p2, p3, p4, p5, p6, p7, p8);
        }

        /// <summary>
        /// Cannot override the '{1}' attribute for {0}. A {0} with a specified '{1}' must not have attributes starting with '{4}' or an '{2}' or '{3}' attribute.
        /// </summary>
        internal static string FormTagHelper_CannotOverrideAction
        {
            get { return GetString("FormTagHelper_CannotOverrideAction"); }
        }

        /// <summary>
        /// Cannot override the '{1}' attribute for {0}. A {0} with a specified '{1}' must not have attributes starting with '{4}' or an '{2}' or '{3}' attribute.
        /// </summary>
        internal static string FormatFormTagHelper_CannotOverrideAction(object p0, object p1, object p2, object p3, object p4)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("FormTagHelper_CannotOverrideAction"), p0, p1, p2, p3, p4);
        }

        /// <summary>
        /// Unexpected '{1}' expression result type '{2}' for {0}. '{1}' must be of type '{3}' if '{4}' is '{5}'.
        /// </summary>
        internal static string InputTagHelper_InvalidExpressionResult
        {
            get { return GetString("InputTagHelper_InvalidExpressionResult"); }
        }

        /// <summary>
        /// Unexpected '{1}' expression result type '{2}' for {0}. '{1}' must be of type '{3}' if '{4}' is '{5}'.
        /// </summary>
        internal static string FormatInputTagHelper_InvalidExpressionResult(object p0, object p1, object p2, object p3, object p4, object p5)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InputTagHelper_InvalidExpressionResult"), p0, p1, p2, p3, p4, p5);
        }

        /// <summary>
        /// Unable to format without a '{1}' expression for {0}. '{2}' must be null if '{1}' is null.
        /// </summary>
        internal static string InputTagHelper_UnableToFormat
        {
            get { return GetString("InputTagHelper_UnableToFormat"); }
        }

        /// <summary>
        /// Unable to format without a '{1}' expression for {0}. '{2}' must be null if '{1}' is null.
        /// </summary>
        internal static string FormatInputTagHelper_UnableToFormat(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InputTagHelper_UnableToFormat"), p0, p1, p2);
        }

        /// <summary>
        /// '{1}' must not be null for {0} if '{2}' is '{3}'.
        /// </summary>
        internal static string InputTagHelper_ValueRequired
        {
            get { return GetString("InputTagHelper_ValueRequired"); }
        }

        /// <summary>
        /// '{1}' must not be null for {0} if '{2}' is '{3}'.
        /// </summary>
        internal static string FormatInputTagHelper_ValueRequired(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InputTagHelper_ValueRequired"), p0, p1, p2, p3);
        }

        /// <summary>
        /// Cannot determine body for {0}. '{2}' must be null if '{1}' is null.
        /// </summary>
        internal static string SelectTagHelper_CannotDetermineContentWhenOnlyItemsSpecified
        {
            get { return GetString("SelectTagHelper_CannotDetermineContentWhenOnlyItemsSpecified"); }
        }

        /// <summary>
        /// Cannot determine body for {0}. '{2}' must be null if '{1}' is null.
        /// </summary>
        internal static string FormatSelectTagHelper_CannotDetermineContentWhenOnlyItemsSpecified(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SelectTagHelper_CannotDetermineContentWhenOnlyItemsSpecified"), p0, p1, p2);
        }

        /// <summary>
        /// Cannot parse '{1}' value '{2}' for {0}. Acceptable values are '{3}', '{4}' and '{5}'.
        /// </summary>
        internal static string TagHelpers_InvalidValue_ThreeAcceptableValues
        {
            get { return GetString("TagHelpers_InvalidValue_ThreeAcceptableValues"); }
        }

        /// <summary>
        /// Cannot parse '{1}' value '{2}' for {0}. Acceptable values are '{3}', '{4}' and '{5}'.
        /// </summary>
        internal static string FormatTagHelpers_InvalidValue_ThreeAcceptableValues(object p0, object p1, object p2, object p3, object p4, object p5)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TagHelpers_InvalidValue_ThreeAcceptableValues"), p0, p1, p2, p3, p4, p5);
        }

        /// <summary>
        /// The {2} was unable to provide metadata about '{1}' expression value '{3}' for {0}.
        /// </summary>
        internal static string TagHelpers_NoProvidedMetadata
        {
            get { return GetString("TagHelpers_NoProvidedMetadata"); }
        }

        /// <summary>
        /// The {2} was unable to provide metadata about '{1}' expression value '{3}' for {0}.
        /// </summary>
        internal static string FormatTagHelpers_NoProvidedMetadata(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TagHelpers_NoProvidedMetadata"), p0, p1, p2, p3);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
