// <auto-generated />
namespace Microsoft.AspNet.Mvc.ModelBinding
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNet.Mvc.ModelBinding.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The argument '{0}' is null or empty.
        /// </summary>
        internal static string ArgumentNullOrEmpty
        {
            get { return GetString("ArgumentNullOrEmpty"); }
        }

        /// <summary>
        /// The argument '{0}' is null or empty.
        /// </summary>
        internal static string FormatArgumentNullOrEmpty(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentNullOrEmpty"), p0);
        }

        /// <summary>
        /// The property {0}.{1} could not be found.
        /// </summary>
        internal static string Common_PropertyNotFound
        {
            get { return GetString("Common_PropertyNotFound"); }
        }

        /// <summary>
        /// The property {0}.{1} could not be found.
        /// </summary>
        internal static string FormatCommon_PropertyNotFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Common_PropertyNotFound"), p0, p1);
        }

        /// <summary>
        /// The key is invalid JQuery syntax because it is missing a closing bracket.
        /// </summary>
        internal static string JQuerySyntaxMissingClosingBracket
        {
            get { return GetString("JQuerySyntaxMissingClosingBracket"); }
        }

        /// <summary>
        /// The key is invalid JQuery syntax because it is missing a closing bracket.
        /// </summary>
        internal static string FormatJQuerySyntaxMissingClosingBracket()
        {
            return GetString("JQuerySyntaxMissingClosingBracket");
        }

        /// <summary>
        /// The value '{0}' is not valid for {1}.
        /// </summary>
        internal static string ModelBinderConfig_ValueInvalid
        {
            get { return GetString("ModelBinderConfig_ValueInvalid"); }
        }

        /// <summary>
        /// The value '{0}' is not valid for {1}.
        /// </summary>
        internal static string FormatModelBinderConfig_ValueInvalid(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ModelBinderConfig_ValueInvalid"), p0, p1);
        }

        /// <summary>
        /// A value is required.
        /// </summary>
        internal static string ModelBinderConfig_ValueRequired
        {
            get { return GetString("ModelBinderConfig_ValueRequired"); }
        }

        /// <summary>
        /// A value is required.
        /// </summary>
        internal static string FormatModelBinderConfig_ValueRequired()
        {
            return GetString("ModelBinderConfig_ValueRequired");
        }

        /// <summary>
        /// The binding context has a null Model, but this binder requires a non-null model of type '{0}'.
        /// </summary>
        internal static string ModelBinderUtil_ModelCannotBeNull
        {
            get { return GetString("ModelBinderUtil_ModelCannotBeNull"); }
        }

        /// <summary>
        /// The binding context has a null Model, but this binder requires a non-null model of type '{0}'.
        /// </summary>
        internal static string FormatModelBinderUtil_ModelCannotBeNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ModelBinderUtil_ModelCannotBeNull"), p0);
        }

        /// <summary>
        /// The binding context has a Model of type '{0}', but this binder can only operate on models of type '{1}'.
        /// </summary>
        internal static string ModelBinderUtil_ModelInstanceIsWrong
        {
            get { return GetString("ModelBinderUtil_ModelInstanceIsWrong"); }
        }

        /// <summary>
        /// The binding context has a Model of type '{0}', but this binder can only operate on models of type '{1}'.
        /// </summary>
        internal static string FormatModelBinderUtil_ModelInstanceIsWrong(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ModelBinderUtil_ModelInstanceIsWrong"), p0, p1);
        }

        /// <summary>
        /// The binding context cannot have a null ModelMetadata.
        /// </summary>
        internal static string ModelBinderUtil_ModelMetadataCannotBeNull
        {
            get { return GetString("ModelBinderUtil_ModelMetadataCannotBeNull"); }
        }

        /// <summary>
        /// The binding context cannot have a null ModelMetadata.
        /// </summary>
        internal static string FormatModelBinderUtil_ModelMetadataCannotBeNull()
        {
            return GetString("ModelBinderUtil_ModelMetadataCannotBeNull");
        }

        /// <summary>
        /// The binding context has a ModelType of '{0}', but this binder can only operate on models of type '{1}'.
        /// </summary>
        internal static string ModelBinderUtil_ModelTypeIsWrong
        {
            get { return GetString("ModelBinderUtil_ModelTypeIsWrong"); }
        }

        /// <summary>
        /// The binding context has a ModelType of '{0}', but this binder can only operate on models of type '{1}'.
        /// </summary>
        internal static string FormatModelBinderUtil_ModelTypeIsWrong(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ModelBinderUtil_ModelTypeIsWrong"), p0, p1);
        }

        /// <summary>
        /// The ModelMetadata property must be set before accessing this property.
        /// </summary>
        internal static string ModelBindingContext_ModelMetadataMustBeSet
        {
            get { return GetString("ModelBindingContext_ModelMetadataMustBeSet"); }
        }

        /// <summary>
        /// The ModelMetadata property must be set before accessing this property.
        /// </summary>
        internal static string FormatModelBindingContext_ModelMetadataMustBeSet()
        {
            return GetString("ModelBindingContext_ModelMetadataMustBeSet");
        }

        /// <summary>
        /// The parameter conversion from type '{0}' to type '{1}' failed. See the inner exception for more information.
        /// </summary>
        internal static string ValueProviderResult_ConversionThrew
        {
            get { return GetString("ValueProviderResult_ConversionThrew"); }
        }

        /// <summary>
        /// The parameter conversion from type '{0}' to type '{1}' failed. See the inner exception for more information.
        /// </summary>
        internal static string FormatValueProviderResult_ConversionThrew(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ValueProviderResult_ConversionThrew"), p0, p1);
        }

        /// <summary>
        /// The parameter conversion from type '{0}' to type '{1}' failed because no type converter can convert between these types.
        /// </summary>
        internal static string ValueProviderResult_NoConverterExists
        {
            get { return GetString("ValueProviderResult_NoConverterExists"); }
        }

        /// <summary>
        /// The parameter conversion from type '{0}' to type '{1}' failed because no type converter can convert between these types.
        /// </summary>
        internal static string FormatValueProviderResult_NoConverterExists(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ValueProviderResult_NoConverterExists"), p0, p1);
        }

        /// <summary>
        /// The model item passed is null, but this ViewData instance requires a non-null model item of type '{0}'.
        /// </summary>
        internal static string ViewDataDictionary_ModelCannotBeNull
        {
            get { return GetString("ViewDataDictionary_ModelCannotBeNull"); }
        }

        /// <summary>
        /// The model item passed is null, but this ViewData instance requires a non-null model item of type '{0}'.
        /// </summary>
        internal static string FormatViewDataDictionary_ModelCannotBeNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewDataDictionary_ModelCannotBeNull"), p0);
        }

        /// <summary>
        /// The model item passed into the ViewData is of type '{0}', but this ViewData instance requires a model item of type '{1}'.
        /// </summary>
        internal static string ViewData_WrongTModelType
        {
            get { return GetString("ViewData_WrongTModelType"); }
        }

        /// <summary>
        /// The model item passed into the ViewData is of type '{0}', but this ViewData instance requires a model item of type '{1}'.
        /// </summary>
        internal static string FormatViewData_WrongTModelType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ViewData_WrongTModelType"), p0, p1);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);
    
            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
