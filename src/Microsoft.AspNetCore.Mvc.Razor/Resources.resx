<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentCannotBeNullOrEmpty" xml:space="preserve">
    <value>Value cannot be null or empty.</value>
  </data>
  <data name="CompilationFailed" xml:space="preserve">
    <value>One or more compilation failures occurred:</value>
  </data>
  <data name="FlushPointCannotBeInvoked" xml:space="preserve">
    <value>'{0}' cannot be invoked when a Layout page is set to be executed.</value>
  </data>
  <data name="LayoutCannotBeLocated" xml:space="preserve">
    <value>The layout view '{0}' could not be located. The following locations were searched:{1}</value>
  </data>
  <data name="LayoutCannotBeRendered" xml:space="preserve">
    <value>Layout page '{0}' cannot be rendered after '{1}' has been invoked.</value>
  </data>
  <data name="RazorPage_ThereIsNoActiveWritingScopeToEnd" xml:space="preserve">
    <value>There is no active writing scope to end.</value>
  </data>
  <data name="RazorPage_CannotFlushWhileInAWritingScope" xml:space="preserve">
    <value>The {0} operation cannot be performed while inside a writing scope in '{1}'.</value>
  </data>
  <data name="RazorPage_MethodCannotBeCalled" xml:space="preserve">
    <value>{0} invocation in '{1}' is invalid. {0} can only be called from a layout page.</value>
  </data>
  <data name="RenderBodyNotCalled" xml:space="preserve">
    <value>{0} has not been called for the page at '{1}'. To ignore call {2}().</value>
  </data>
  <data name="SectionAlreadyDefined" xml:space="preserve">
    <value>Section '{0}' is already defined.</value>
  </data>
  <data name="SectionAlreadyRendered" xml:space="preserve">
    <value>{0} invocation in '{1}' is invalid. The section '{2}' has already been rendered.</value>
  </data>
  <data name="SectionNotDefined" xml:space="preserve">
    <value>The layout page '{0}' cannot find the section '{1}' in the content page '{2}'.</value>
  </data>
  <data name="SectionsNotRendered" xml:space="preserve">
    <value>The following sections have been defined but have not been rendered by the page at '{0}': '{1}'. To ignore an unrendered section call {2}("sectionName").</value>
  </data>
  <data name="ViewContextMustBeSet" xml:space="preserve">
    <value>'{0} must be set to access '{1}'.</value>
  </data>
  <data name="GeneratedCodeFileName" xml:space="preserve">
    <value>Generated Code</value>
  </data>
  <data name="RazorPage_InvalidTagHelperIndexerAssignment" xml:space="preserve">
    <value>Unable to perform '{0}' assignment. Tag helper property '{1}.{2}' must not be null.</value>
  </data>
  <data name="CouldNotResolveApplicationRelativeUrl_TagHelper" xml:space="preserve">
    <value>Unexpected return value from '{1}.{2}' for URL '{0}'. If the '{1}' service has been overridden, change '{2}' to replace only the '~/' prefix. Otherwise, add the following directive to the Razor page to disable URL resolution relative to the application's 'webroot' setting:

@{3} "{4}, {5}"</value>
  </data>
  <data name="LayoutHasCircularReference" xml:space="preserve">
    <value>A circular layout reference was detected when rendering '{0}'. The layout page '{1}' has already been rendered.</value>
  </data>
  <data name="Compilation_MissingReferences" xml:space="preserve">
    <value>One or more compilation references may be missing. If you're seeing this in a published application, set '{0}' to true in your project file to ensure files in the refs directory are published.</value>
  </data>
  <data name="ViewLocationFormatsIsRequired" xml:space="preserve">
    <value>'{0}' cannot be empty. These locations are required to locate a view for rendering.</value>
  </data>
  <data name="RazorPage_NestingAttributeWritingScopesNotSupported" xml:space="preserve">
    <value>Nesting of TagHelper attribute writing scopes is not supported.</value>
  </data>
  <data name="FileProvidersAreRequired" xml:space="preserve">
    <value>'{0}.{1}' must not be empty. At least one '{2}' is required to locate a view for rendering.</value>
  </data>
  <data name="RazorProject_PathMustStartWithForwardSlash" xml:space="preserve">
    <value>Path must begin with a forward slash '/'.</value>
  </data>
  <data name="PropertyMustBeSet" xml:space="preserve">
    <value>The property '{0}' of '{1}' must not be null.</value>
  </data>
  <data name="RazorViewCompiler_ViewPathsDifferOnlyInCase" xml:space="preserve">
    <value>The following precompiled view paths differ only in case, which is not supported:</value>
  </data>
  <data name="UnsupportedDebugInformationFormat" xml:space="preserve">
    <value>The debug type specified in the dependency context could be parsed. The debug type value '{0}' is not supported.</value>
  </data>
  <data name="CompiledViewDescriptor_NoData" xml:space="preserve">
    <value>At least one of the '{0}' or '{1}' values must be non-null.</value>
  </data>
</root>