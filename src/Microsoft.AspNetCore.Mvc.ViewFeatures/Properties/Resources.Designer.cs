// <auto-generated />
namespace Microsoft.AspNetCore.Mvc.ViewFeatures
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Mvc.ViewFeatures.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The view component name '{0}' matched multiple types:{1}{2}
        /// </summary>
        internal static string ViewComponent_AmbiguousTypeMatch
        {
            get => GetString("ViewComponent_AmbiguousTypeMatch");
        }

        /// <summary>
        /// The view component name '{0}' matched multiple types:{1}{2}
        /// </summary>
        internal static string FormatViewComponent_AmbiguousTypeMatch(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_AmbiguousTypeMatch"), p0, p1, p2);

        /// <summary>
        /// Method '{0}' of view component '{1}' should be declared to return {2}&lt;T&gt;.
        /// </summary>
        internal static string ViewComponent_AsyncMethod_ShouldReturnTask
        {
            get => GetString("ViewComponent_AsyncMethod_ShouldReturnTask");
        }

        /// <summary>
        /// Method '{0}' of view component '{1}' should be declared to return {2}&lt;T&gt;.
        /// </summary>
        internal static string FormatViewComponent_AsyncMethod_ShouldReturnTask(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_AsyncMethod_ShouldReturnTask"), p0, p1, p2);

        /// <summary>
        /// A view component must return a non-null value.
        /// </summary>
        internal static string ViewComponent_MustReturnValue
        {
            get => GetString("ViewComponent_MustReturnValue");
        }

        /// <summary>
        /// A view component must return a non-null value.
        /// </summary>
        internal static string FormatViewComponent_MustReturnValue()
            => GetString("ViewComponent_MustReturnValue");

        /// <summary>
        /// Method '{0}' of view component '{1}' should be declared to return a value.
        /// </summary>
        internal static string ViewComponent_SyncMethod_ShouldReturnValue
        {
            get => GetString("ViewComponent_SyncMethod_ShouldReturnValue");
        }

        /// <summary>
        /// Method '{0}' of view component '{1}' should be declared to return a value.
        /// </summary>
        internal static string FormatViewComponent_SyncMethod_ShouldReturnValue(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_SyncMethod_ShouldReturnValue"), p0, p1);

        /// <summary>
        /// A view component named '{0}' could not be found. A view component must be a public non-abstract class, not contain any generic parameters, and either be decorated with '{1}' or have a class name ending with the '{2}' suffix. A view component must not be decorated with '{3}'.
        /// </summary>
        internal static string ViewComponent_CannotFindComponent
        {
            get => GetString("ViewComponent_CannotFindComponent");
        }

        /// <summary>
        /// A view component named '{0}' could not be found. A view component must be a public non-abstract class, not contain any generic parameters, and either be decorated with '{1}' or have a class name ending with the '{2}' suffix. A view component must not be decorated with '{3}'.
        /// </summary>
        internal static string FormatViewComponent_CannotFindComponent(object p0, object p1, object p2, object p3)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_CannotFindComponent"), p0, p1, p2, p3);

        /// <summary>
        /// An invoker could not be created for the view component '{0}'.
        /// </summary>
        internal static string ViewComponent_IViewComponentFactory_ReturnedNull
        {
            get => GetString("ViewComponent_IViewComponentFactory_ReturnedNull");
        }

        /// <summary>
        /// An invoker could not be created for the view component '{0}'.
        /// </summary>
        internal static string FormatViewComponent_IViewComponentFactory_ReturnedNull(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_IViewComponentFactory_ReturnedNull"), p0);

        /// <summary>
        /// Could not find an '{0}' or '{1}' method for the view component '{2}'.
        /// </summary>
        internal static string ViewComponent_CannotFindMethod
        {
            get => GetString("ViewComponent_CannotFindMethod");
        }

        /// <summary>
        /// Could not find an '{0}' or '{1}' method for the view component '{2}'.
        /// </summary>
        internal static string FormatViewComponent_CannotFindMethod(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_CannotFindMethod"), p0, p1, p2);

        /// <summary>
        /// View components only support returning {0}, {1} or {2}.
        /// </summary>
        internal static string ViewComponent_InvalidReturnValue
        {
            get => GetString("ViewComponent_InvalidReturnValue");
        }

        /// <summary>
        /// View components only support returning {0}, {1} or {2}.
        /// </summary>
        internal static string FormatViewComponent_InvalidReturnValue(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_InvalidReturnValue"), p0, p1, p2);

        /// <summary>
        /// Value cannot be null or empty.
        /// </summary>
        internal static string ArgumentCannotBeNullOrEmpty
        {
            get => GetString("ArgumentCannotBeNullOrEmpty");
        }

        /// <summary>
        /// Value cannot be null or empty.
        /// </summary>
        internal static string FormatArgumentCannotBeNullOrEmpty()
            => GetString("ArgumentCannotBeNullOrEmpty");

        /// <summary>
        /// The '{0}' property of '{1}' must not be null.
        /// </summary>
        internal static string PropertyOfTypeCannotBeNull
        {
            get => GetString("PropertyOfTypeCannotBeNull");
        }

        /// <summary>
        /// The '{0}' property of '{1}' must not be null.
        /// </summary>
        internal static string FormatPropertyOfTypeCannotBeNull(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("PropertyOfTypeCannotBeNull"), p0, p1);

        /// <summary>
        /// The '{0}' method of type '{1}' cannot return a null value.
        /// </summary>
        internal static string TypeMethodMustReturnNotNullValue
        {
            get => GetString("TypeMethodMustReturnNotNullValue");
        }

        /// <summary>
        /// The '{0}' method of type '{1}' cannot return a null value.
        /// </summary>
        internal static string FormatTypeMethodMustReturnNotNullValue(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("TypeMethodMustReturnNotNullValue"), p0, p1);

        /// <summary>
        /// Property '{0}' is of type '{1}', but this method requires a value of type '{2}'.
        /// </summary>
        internal static string ArgumentPropertyUnexpectedType
        {
            get => GetString("ArgumentPropertyUnexpectedType");
        }

        /// <summary>
        /// Property '{0}' is of type '{1}', but this method requires a value of type '{2}'.
        /// </summary>
        internal static string FormatArgumentPropertyUnexpectedType(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("ArgumentPropertyUnexpectedType"), p0, p1, p2);

        /// <summary>
        /// The partial view '{0}' was not found or no view engine supports the searched locations. The following locations were searched:{1}
        /// </summary>
        internal static string Common_PartialViewNotFound
        {
            get => GetString("Common_PartialViewNotFound");
        }

        /// <summary>
        /// The partial view '{0}' was not found or no view engine supports the searched locations. The following locations were searched:{1}
        /// </summary>
        internal static string FormatCommon_PartialViewNotFound(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("Common_PartialViewNotFound"), p0, p1);

        /// <summary>
        /// False
        /// </summary>
        internal static string Common_TriState_False
        {
            get => GetString("Common_TriState_False");
        }

        /// <summary>
        /// False
        /// </summary>
        internal static string FormatCommon_TriState_False()
            => GetString("Common_TriState_False");

        /// <summary>
        /// Not Set
        /// </summary>
        internal static string Common_TriState_NotSet
        {
            get => GetString("Common_TriState_NotSet");
        }

        /// <summary>
        /// Not Set
        /// </summary>
        internal static string FormatCommon_TriState_NotSet()
            => GetString("Common_TriState_NotSet");

        /// <summary>
        /// True
        /// </summary>
        internal static string Common_TriState_True
        {
            get => GetString("Common_TriState_True");
        }

        /// <summary>
        /// True
        /// </summary>
        internal static string FormatCommon_TriState_True()
            => GetString("Common_TriState_True");

        /// <summary>
        /// ViewData value must not be null.
        /// </summary>
        internal static string DynamicViewData_ViewDataNull
        {
            get => GetString("DynamicViewData_ViewDataNull");
        }

        /// <summary>
        /// ViewData value must not be null.
        /// </summary>
        internal static string FormatDynamicViewData_ViewDataNull()
            => GetString("DynamicViewData_ViewDataNull");

        /// <summary>
        /// The expression compiler was unable to evaluate the indexer expression '{0}' because it references the model parameter '{1}' which is unavailable.
        /// </summary>
        internal static string ExpressionHelper_InvalidIndexerExpression
        {
            get => GetString("ExpressionHelper_InvalidIndexerExpression");
        }

        /// <summary>
        /// The expression compiler was unable to evaluate the indexer expression '{0}' because it references the model parameter '{1}' which is unavailable.
        /// </summary>
        internal static string FormatExpressionHelper_InvalidIndexerExpression(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("ExpressionHelper_InvalidIndexerExpression"), p0, p1);

        /// <summary>
        /// The IModelMetadataProvider was unable to provide metadata for expression '{0}'.
        /// </summary>
        internal static string HtmlHelper_NullModelMetadata
        {
            get => GetString("HtmlHelper_NullModelMetadata");
        }

        /// <summary>
        /// The IModelMetadataProvider was unable to provide metadata for expression '{0}'.
        /// </summary>
        internal static string FormatHtmlHelper_NullModelMetadata(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("HtmlHelper_NullModelMetadata"), p0);

        /// <summary>
        /// Must call 'Contextualize' method before using this HtmlHelper instance.
        /// </summary>
        internal static string HtmlHelper_NotContextualized
        {
            get => GetString("HtmlHelper_NotContextualized");
        }

        /// <summary>
        /// Must call 'Contextualize' method before using this HtmlHelper instance.
        /// </summary>
        internal static string FormatHtmlHelper_NotContextualized()
            => GetString("HtmlHelper_NotContextualized");

        /// <summary>
        /// There is no ViewData item of type '{0}' that has the key '{1}'.
        /// </summary>
        internal static string HtmlHelper_MissingSelectData
        {
            get => GetString("HtmlHelper_MissingSelectData");
        }

        /// <summary>
        /// There is no ViewData item of type '{0}' that has the key '{1}'.
        /// </summary>
        internal static string FormatHtmlHelper_MissingSelectData(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("HtmlHelper_MissingSelectData"), p0, p1);

        /// <summary>
        /// The parameter '{0}' must evaluate to an IEnumerable when multiple selection is allowed.
        /// </summary>
        internal static string HtmlHelper_SelectExpressionNotEnumerable
        {
            get => GetString("HtmlHelper_SelectExpressionNotEnumerable");
        }

        /// <summary>
        /// The parameter '{0}' must evaluate to an IEnumerable when multiple selection is allowed.
        /// </summary>
        internal static string FormatHtmlHelper_SelectExpressionNotEnumerable(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("HtmlHelper_SelectExpressionNotEnumerable"), p0);

        /// <summary>
        /// The type '{0}' is not supported. Type must be an {1} that does not have an associated {2}.
        /// </summary>
        internal static string HtmlHelper_TypeNotSupported_ForGetEnumSelectList
        {
            get => GetString("HtmlHelper_TypeNotSupported_ForGetEnumSelectList");
        }

        /// <summary>
        /// The type '{0}' is not supported. Type must be an {1} that does not have an associated {2}.
        /// </summary>
        internal static string FormatHtmlHelper_TypeNotSupported_ForGetEnumSelectList(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("HtmlHelper_TypeNotSupported_ForGetEnumSelectList"), p0, p1, p2);

        /// <summary>
        /// The ViewData item that has the key '{0}' is of type '{1}' but must be of type '{2}'.
        /// </summary>
        internal static string HtmlHelper_WrongSelectDataType
        {
            get => GetString("HtmlHelper_WrongSelectDataType");
        }

        /// <summary>
        /// The ViewData item that has the key '{0}' is of type '{1}' but must be of type '{2}'.
        /// </summary>
        internal static string FormatHtmlHelper_WrongSelectDataType(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("HtmlHelper_WrongSelectDataType"), p0, p1, p2);

        /// <summary>
        /// The '{0}' template was used with an object of type '{1}', which does not implement '{2}'.
        /// </summary>
        internal static string Templates_TypeMustImplementIEnumerable
        {
            get => GetString("Templates_TypeMustImplementIEnumerable");
        }

        /// <summary>
        /// The '{0}' template was used with an object of type '{1}', which does not implement '{2}'.
        /// </summary>
        internal static string FormatTemplates_TypeMustImplementIEnumerable(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("Templates_TypeMustImplementIEnumerable"), p0, p1, p2);

        /// <summary>
        /// Templates can be used only with field access, property access, single-dimension array index, or single-parameter custom indexer expressions.
        /// </summary>
        internal static string TemplateHelpers_TemplateLimitations
        {
            get => GetString("TemplateHelpers_TemplateLimitations");
        }

        /// <summary>
        /// Templates can be used only with field access, property access, single-dimension array index, or single-parameter custom indexer expressions.
        /// </summary>
        internal static string FormatTemplateHelpers_TemplateLimitations()
            => GetString("TemplateHelpers_TemplateLimitations");

        /// <summary>
        /// Unable to locate an appropriate template for type {0}.
        /// </summary>
        internal static string TemplateHelpers_NoTemplate
        {
            get => GetString("TemplateHelpers_NoTemplate");
        }

        /// <summary>
        /// Unable to locate an appropriate template for type {0}.
        /// </summary>
        internal static string FormatTemplateHelpers_NoTemplate(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("TemplateHelpers_NoTemplate"), p0);

        /// <summary>
        /// The model item passed is null, but this ViewDataDictionary instance requires a non-null model item of type '{0}'.
        /// </summary>
        internal static string ViewData_ModelCannotBeNull
        {
            get => GetString("ViewData_ModelCannotBeNull");
        }

        /// <summary>
        /// The model item passed is null, but this ViewDataDictionary instance requires a non-null model item of type '{0}'.
        /// </summary>
        internal static string FormatViewData_ModelCannotBeNull(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewData_ModelCannotBeNull"), p0);

        /// <summary>
        /// The model item passed into the ViewDataDictionary is of type '{0}', but this ViewDataDictionary instance requires a model item of type '{1}'.
        /// </summary>
        internal static string ViewData_WrongTModelType
        {
            get => GetString("ViewData_WrongTModelType");
        }

        /// <summary>
        /// The model item passed into the ViewDataDictionary is of type '{0}', but this ViewDataDictionary instance requires a model item of type '{1}'.
        /// </summary>
        internal static string FormatViewData_WrongTModelType(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewData_WrongTModelType"), p0, p1);

        /// <summary>
        /// The partial view '{0}' was not found. The following locations were searched:{1}
        /// </summary>
        internal static string ViewEngine_PartialViewNotFound
        {
            get => GetString("ViewEngine_PartialViewNotFound");
        }

        /// <summary>
        /// The partial view '{0}' was not found. The following locations were searched:{1}
        /// </summary>
        internal static string FormatViewEngine_PartialViewNotFound(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewEngine_PartialViewNotFound"), p0, p1);

        /// <summary>
        /// The view '{0}' was not found. The following locations were searched:{1}
        /// </summary>
        internal static string ViewEngine_ViewNotFound
        {
            get => GetString("ViewEngine_ViewNotFound");
        }

        /// <summary>
        /// The view '{0}' was not found. The following locations were searched:{1}
        /// </summary>
        internal static string FormatViewEngine_ViewNotFound(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewEngine_ViewNotFound"), p0, p1);

        /// <summary>
        /// The value must be greater than or equal to zero.
        /// </summary>
        internal static string HtmlHelper_TextAreaParameterOutOfRange
        {
            get => GetString("HtmlHelper_TextAreaParameterOutOfRange");
        }

        /// <summary>
        /// The value must be greater than or equal to zero.
        /// </summary>
        internal static string FormatHtmlHelper_TextAreaParameterOutOfRange()
            => GetString("HtmlHelper_TextAreaParameterOutOfRange");

        /// <summary>
        /// Validation parameter names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationParameterCannotBeEmpty
        {
            get => GetString("UnobtrusiveJavascript_ValidationParameterCannotBeEmpty");
        }

        /// <summary>
        /// Validation parameter names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationParameterCannotBeEmpty(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationParameterCannotBeEmpty"), p0);

        /// <summary>
        /// Validation parameter names in unobtrusive client validation rules must start with a lowercase letter and consist of only lowercase letters or digits. Validation parameter name: {0}, client rule type: {1}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationParameterMustBeLegal
        {
            get => GetString("UnobtrusiveJavascript_ValidationParameterMustBeLegal");
        }

        /// <summary>
        /// Validation parameter names in unobtrusive client validation rules must start with a lowercase letter and consist of only lowercase letters or digits. Validation parameter name: {0}, client rule type: {1}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationParameterMustBeLegal(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationParameterMustBeLegal"), p0, p1);

        /// <summary>
        /// Validation type names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationTypeCannotBeEmpty
        {
            get => GetString("UnobtrusiveJavascript_ValidationTypeCannotBeEmpty");
        }

        /// <summary>
        /// Validation type names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationTypeCannotBeEmpty(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationTypeCannotBeEmpty"), p0);

        /// <summary>
        /// Validation type names in unobtrusive client validation rules must consist of only lowercase letters. Invalid name: "{0}", client rule type: {1}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationTypeMustBeLegal
        {
            get => GetString("UnobtrusiveJavascript_ValidationTypeMustBeLegal");
        }

        /// <summary>
        /// Validation type names in unobtrusive client validation rules must consist of only lowercase letters. Invalid name: "{0}", client rule type: {1}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationTypeMustBeLegal(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationTypeMustBeLegal"), p0, p1);

        /// <summary>
        /// Validation type names in unobtrusive client validation rules must be unique. The following validation type was seen more than once: {0}
        /// </summary>
        internal static string UnobtrusiveJavascript_ValidationTypeMustBeUnique
        {
            get => GetString("UnobtrusiveJavascript_ValidationTypeMustBeUnique");
        }

        /// <summary>
        /// Validation type names in unobtrusive client validation rules must be unique. The following validation type was seen more than once: {0}
        /// </summary>
        internal static string FormatUnobtrusiveJavascript_ValidationTypeMustBeUnique(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("UnobtrusiveJavascript_ValidationTypeMustBeUnique"), p0);

        /// <summary>
        /// The type '{0}' must derive from '{1}'.
        /// </summary>
        internal static string TypeMustDeriveFromType
        {
            get => GetString("TypeMustDeriveFromType");
        }

        /// <summary>
        /// The type '{0}' must derive from '{1}'.
        /// </summary>
        internal static string FormatTypeMustDeriveFromType(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("TypeMustDeriveFromType"), p0, p1);

        /// <summary>
        /// Could not find a replacement for view expansion token '{0}'.
        /// </summary>
        internal static string TemplatedViewLocationExpander_NoReplacementToken
        {
            get => GetString("TemplatedViewLocationExpander_NoReplacementToken");
        }

        /// <summary>
        /// Could not find a replacement for view expansion token '{0}'.
        /// </summary>
        internal static string FormatTemplatedViewLocationExpander_NoReplacementToken(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("TemplatedViewLocationExpander_NoReplacementToken"), p0);

        /// <summary>
        /// {0} must be executed before {1} can be invoked.
        /// </summary>
        internal static string TemplatedExpander_PopulateValuesMustBeInvokedFirst
        {
            get => GetString("TemplatedExpander_PopulateValuesMustBeInvokedFirst");
        }

        /// <summary>
        /// {0} must be executed before {1} can be invoked.
        /// </summary>
        internal static string FormatTemplatedExpander_PopulateValuesMustBeInvokedFirst(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("TemplatedExpander_PopulateValuesMustBeInvokedFirst"), p0, p1);

        /// <summary>
        /// The result of value factory cannot be null.
        /// </summary>
        internal static string TemplatedExpander_ValueFactoryCannotReturnNull
        {
            get => GetString("TemplatedExpander_ValueFactoryCannotReturnNull");
        }

        /// <summary>
        /// The result of value factory cannot be null.
        /// </summary>
        internal static string FormatTemplatedExpander_ValueFactoryCannotReturnNull()
            => GetString("TemplatedExpander_ValueFactoryCannotReturnNull");

        /// <summary>
        /// Type: '{0}' - Name: '{1}'
        /// </summary>
        internal static string ViewComponent_AmbiguousTypeMatch_Item
        {
            get => GetString("ViewComponent_AmbiguousTypeMatch_Item");
        }

        /// <summary>
        /// Type: '{0}' - Name: '{1}'
        /// </summary>
        internal static string FormatViewComponent_AmbiguousTypeMatch_Item(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_AmbiguousTypeMatch_Item"), p0, p1);

        /// <summary>
        /// The property {0}.{1} could not be found.
        /// </summary>
        internal static string Common_PropertyNotFound
        {
            get => GetString("Common_PropertyNotFound");
        }

        /// <summary>
        /// The property {0}.{1} could not be found.
        /// </summary>
        internal static string FormatCommon_PropertyNotFound(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("Common_PropertyNotFound"), p0, p1);

        /// <summary>
        /// No URL for remote validation could be found.
        /// </summary>
        internal static string RemoteAttribute_NoUrlFound
        {
            get => GetString("RemoteAttribute_NoUrlFound");
        }

        /// <summary>
        /// No URL for remote validation could be found.
        /// </summary>
        internal static string FormatRemoteAttribute_NoUrlFound()
            => GetString("RemoteAttribute_NoUrlFound");

        /// <summary>
        /// '{0}' is invalid.
        /// </summary>
        internal static string RemoteAttribute_RemoteValidationFailed
        {
            get => GetString("RemoteAttribute_RemoteValidationFailed");
        }

        /// <summary>
        /// '{0}' is invalid.
        /// </summary>
        internal static string FormatRemoteAttribute_RemoteValidationFailed(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("RemoteAttribute_RemoteValidationFailed"), p0);

        /// <summary>
        /// The name of an HTML field cannot be null or empty. Instead use methods {0}.{1} or {2}.{3} with a non-empty {4} argument value.
        /// </summary>
        internal static string HtmlGenerator_FieldNameCannotBeNullOrEmpty
        {
            get => GetString("HtmlGenerator_FieldNameCannotBeNullOrEmpty");
        }

        /// <summary>
        /// The name of an HTML field cannot be null or empty. Instead use methods {0}.{1} or {2}.{3} with a non-empty {4} argument value.
        /// </summary>
        internal static string FormatHtmlGenerator_FieldNameCannotBeNullOrEmpty(object p0, object p1, object p2, object p3, object p4)
            => string.Format(CultureInfo.CurrentCulture, GetString("HtmlGenerator_FieldNameCannotBeNullOrEmpty"), p0, p1, p2, p3, p4);

        /// <summary>
        /// Either the '{0}' or '{1}' property must be set in order to invoke a view component.
        /// </summary>
        internal static string ViewComponentResult_NameOrTypeMustBeSet
        {
            get => GetString("ViewComponentResult_NameOrTypeMustBeSet");
        }

        /// <summary>
        /// Either the '{0}' or '{1}' property must be set in order to invoke a view component.
        /// </summary>
        internal static string FormatViewComponentResult_NameOrTypeMustBeSet(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponentResult_NameOrTypeMustBeSet"), p0, p1);

        /// <summary>
        /// Cannot deserialize {0} of type '{1}'.
        /// </summary>
        internal static string TempData_CannotDeserializeToken
        {
            get => GetString("TempData_CannotDeserializeToken");
        }

        /// <summary>
        /// Cannot deserialize {0} of type '{1}'.
        /// </summary>
        internal static string FormatTempData_CannotDeserializeToken(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("TempData_CannotDeserializeToken"), p0, p1);

        /// <summary>
        /// The '{0}' cannot serialize a dictionary with a key of type '{1}'.
        /// </summary>
        internal static string TempData_CannotSerializeDictionary
        {
            get => GetString("TempData_CannotSerializeDictionary");
        }

        /// <summary>
        /// The '{0}' cannot serialize a dictionary with a key of type '{1}'.
        /// </summary>
        internal static string FormatTempData_CannotSerializeDictionary(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("TempData_CannotSerializeDictionary"), p0, p1);

        /// <summary>
        /// The '{0}' cannot serialize an object of type '{1}'.
        /// </summary>
        internal static string TempData_CannotSerializeType
        {
            get => GetString("TempData_CannotSerializeType");
        }

        /// <summary>
        /// The '{0}' cannot serialize an object of type '{1}'.
        /// </summary>
        internal static string FormatTempData_CannotSerializeType(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("TempData_CannotSerializeType"), p0, p1);

        /// <summary>
        /// The collection already contains an entry with key '{0}'.
        /// </summary>
        internal static string Dictionary_DuplicateKey
        {
            get => GetString("Dictionary_DuplicateKey");
        }

        /// <summary>
        /// The collection already contains an entry with key '{0}'.
        /// </summary>
        internal static string FormatDictionary_DuplicateKey(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("Dictionary_DuplicateKey"), p0);

        /// <summary>
        /// Method '{0}' of view component '{1}' cannot return a {2}.
        /// </summary>
        internal static string ViewComponent_SyncMethod_CannotReturnTask
        {
            get => GetString("ViewComponent_SyncMethod_CannotReturnTask");
        }

        /// <summary>
        /// Method '{0}' of view component '{1}' cannot return a {2}.
        /// </summary>
        internal static string FormatViewComponent_SyncMethod_CannotReturnTask(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_SyncMethod_CannotReturnTask"), p0, p1, p2);

        /// <summary>
        /// View component '{0}' must have exactly one public method named '{1}' or '{2}'.
        /// </summary>
        internal static string ViewComponent_AmbiguousMethods
        {
            get => GetString("ViewComponent_AmbiguousMethods");
        }

        /// <summary>
        /// View component '{0}' must have exactly one public method named '{1}' or '{2}'.
        /// </summary>
        internal static string FormatViewComponent_AmbiguousMethods(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewComponent_AmbiguousMethods"), p0, p1, p2);

        /// <summary>
        /// The type '{0}' cannot be activated by '{1}' because it is either a value type, an interface, an abstract class or an open generic type.
        /// </summary>
        internal static string ValueInterfaceAbstractOrOpenGenericTypesCannotBeActivated
        {
            get => GetString("ValueInterfaceAbstractOrOpenGenericTypesCannotBeActivated");
        }

        /// <summary>
        /// The type '{0}' cannot be activated by '{1}' because it is either a value type, an interface, an abstract class or an open generic type.
        /// </summary>
        internal static string FormatValueInterfaceAbstractOrOpenGenericTypesCannotBeActivated(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("ValueInterfaceAbstractOrOpenGenericTypesCannotBeActivated"), p0, p1);

        /// <summary>
        /// The {0} was unable to provide metadata for expression '{1}'.
        /// </summary>
        internal static string CreateModelExpression_NullModelMetadata
        {
            get => GetString("CreateModelExpression_NullModelMetadata");
        }

        /// <summary>
        /// The {0} was unable to provide metadata for expression '{1}'.
        /// </summary>
        internal static string FormatCreateModelExpression_NullModelMetadata(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("CreateModelExpression_NullModelMetadata"), p0, p1);

        /// <summary>
        /// '{0}.{1}' must not be empty. At least one '{2}' is required to locate a view for rendering.
        /// </summary>
        internal static string ViewEnginesAreRequired
        {
            get => GetString("ViewEnginesAreRequired");
        }

        /// <summary>
        /// '{0}.{1}' must not be empty. At least one '{2}' is required to locate a view for rendering.
        /// </summary>
        internal static string FormatViewEnginesAreRequired(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("ViewEnginesAreRequired"), p0, p1, p2);

        /// <summary>
        /// The '{0}.{1}' property with {2} is invalid. A property using {2} must be of primitive or string type.
        /// </summary>
        internal static string TempDataProperties_PrimitiveTypeOrString
        {
            get => GetString("TempDataProperties_PrimitiveTypeOrString");
        }

        /// <summary>
        /// The '{0}.{1}' property with {2} is invalid. A property using {2} must be of primitive or string type.
        /// </summary>
        internal static string FormatTempDataProperties_PrimitiveTypeOrString(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("TempDataProperties_PrimitiveTypeOrString"), p0, p1, p2);

        /// <summary>
        /// The '{0}.{1}' property with {2} is invalid. A property using {2} must have a public getter and setter.
        /// </summary>
        internal static string TempDataProperties_PublicGetterSetter
        {
            get => GetString("TempDataProperties_PublicGetterSetter");
        }

        /// <summary>
        /// The '{0}.{1}' property with {2} is invalid. A property using {2} must have a public getter and setter.
        /// </summary>
        internal static string FormatTempDataProperties_PublicGetterSetter(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("TempDataProperties_PublicGetterSetter"), p0, p1, p2);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
